#!/bin/sh

mnt_enabled() {

    return 0
}

INITLOG=/initramfs.log
USB_PLUGGED=/usb.plugged
BOOT_DEV=/media/sda1
APP_DEV=/media/sda2
IMG=image.rootfs

mnt_run() {

    # Prep two or more layers for overlayfs:
    # Bottom: read-only squashfs
    # Middle: read-only stack of PATCHES/xx dirs (if exists)
    # Top: read-write tmpfs
    mkdir -p /rootfs.ro
    if [ $? != 0 ]; then
        fatal "ERROR: mkdir /rootfs.ro failed"
    fi
    mkdir -p /rootfs.rw
    if [ $? != 0 ]; then
        fatal "ERROR: mkdir /rootfs.rw failed"
    fi

    bootparam_imgdir=$(basename $(readlink -f ${BOOT_DEV}/${bootparam_imgdir}))
    imgdir=${APP_DEV}/${bootparam_imgdir}

    # Mount the filesystem image as read-only:
    mount -o loop,ro ${imgdir}/${IMG} /rootfs.ro
    if [ $? != 0 ]; then
        fatal "ERROR: mount -o loop,ro failed"
    fi

    # Create a read-write partition:
    mount -t tmpfs -o rw,noatime,mode=755,size=64m tmpfs /rootfs.rw
    if [ $? != 0 ]; then
        fatal "ERROR: mount -t tmpfs failed"
    fi

    # Create a stacked multilayer overlayfs based on Patch directories (lowest number is at the bottom):
    cd ${imgdir}
    let numpatches=0
    for dir in `ls -d PATCHES/?? 2> /dev/null | sort -r`; do
        chmod go+rx $dir
        eval patch_dirs$numpatches=$dir
        let numpatches+=1
    done

    if [ ${numpatches} != 0 ]; then
        let i=0
        while [ $i -lt $numpatches ]; do
            # Skip over INVALID PATCH dirs:
            patch_dir=$(eval echo \${patch_dirs${i}})
            if [ ! -e $patch_dir/INVALID ]; then
                patch_layers=${patch_layers}${imgdir}/${patch_dir}
            fi
            let i+=1
        done
        echo "patch_layers ==> ${patch_layers}"
    fi
        
    # Combine the three (/ro + PATCHES/xx + /rw) in overlay.
    # Note that PFSxx may be empty if there are no patches present.
    mkdir -p /rootfs.rw/.work
    mkdir -p /rootfs.rw/up
    if [ ${numpatches} != 0 ]; then
        mount -t overlay overlay -o "lowerdir=${patch_layers}:/rootfs.ro,upperdir=/rootfs.rw/up,workdir=/rootfs.rw/.work" $ROOTFS_DIR
    else
        mount -t overlay overlay -o "lowerdir=/rootfs.ro,upperdir=/rootfs.rw/up,workdir=/rootfs.rw/.work" $ROOTFS_DIR
    fi
    if [ $? != 0 ]; then
        fatal "ERROR: mount -t overlayfs failed"
    fi

    # Move the /ro and /rw partitions
    mkdir -p $ROOTFS_DIR/mnt/ro
    mkdir -p $ROOTFS_DIR/mnt/rw
    mount --move /rootfs.ro $ROOTFS_DIR/mnt/ro
    if [ $? != 0 ]; then
        fatal "ERROR: mount --move /rootfs.ro failed"
    fi
    mount --move /rootfs.rw $ROOTFS_DIR/mnt/rw
    if [ $? != 0 ]; then
        fatal "ERROR: mount --move /rootfs.rw failed"
    fi

    # Check to see if actually mounted, dir could exist but not mounted,
    # causing mount to fail, fatal resets card :(
    mounted=`grep "/media/sda1" /etc/mtab`
    if [ -d "/media/sda1" ] && [ -n "${mounted}" ]; then
        mkdir -p $ROOTFS_DIR/media/sda1
        mount --move /media/sda1 $ROOTFS_DIR/media/sda1
        if [ $? != 0 ]; then
            fatal "ERROR: mount --move /media/sda1 failed"
        fi
    fi

    mounted=`grep "/media/sda2" /etc/mtab`
    if [ -d "/media/sda2" ] && [ -n "${mounted}" ]; then
        mkdir -p $ROOTFS_DIR/media/sda2
        mount --move /media/sda2 $ROOTFS_DIR/media/sda2
        if [ $? != 0 ]; then
            fatal "ERROR: mount --move /media/sda2 failed"
        fi
    fi

    # create links for BOOT and APP 
    cd  ${ROOTFS_DIR}
    if [ $? != 0 ]; then
        fatal "ERROR: cd ${ROOTFS_DIR} failed"
    fi
        
    ln -sf ./media/sda2 APP 
    if [ $? != 0 ]; then
        fatal "ERROR: ln /media/sda2 failed"
    fi
    ln -sf ./media/sda1 BOOT
    if [ $? != 0 ]; then
        fatal "ERROR: ln /media/sda1 failed"
    fi

    if [ -e $INITLOG ]; then
        mv $INITLOG ${ROOTFS_DIR}/tmp/
    fi
   
    cd /
}
